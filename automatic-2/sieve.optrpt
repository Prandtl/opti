Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.3.199 Build 20190206

Compiler options: -o sieve.o -parallel -qopt-report=5

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: true
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main()) [1/1=100.0%] sieve.c(7,1)
  -> EXTERN: (13,5) printf(const char *__restrict__, ...)
  -> EXTERN: (14,5) scanf(const char *__restrict__, ...)
  -> EXTERN: (16,5) printf(const char *__restrict__, ...)
  -> EXTERN: (17,26) malloc(size_t)
  -> EXTERN: (25,5) printf(const char *__restrict__, ...)
  -> EXTERN: (27,5) printf(const char *__restrict__, ...)
  -> EXTERN: (28,5) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (29,15) floor(double)
  -> EXTERN: (43,5) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (44,5) printf(const char *__restrict__, ...)
  -> EXTERN: (46,5) printf(const char *__restrict__, ...)
  -> EXTERN: (57,5) printf(const char *__restrict__, ...)
  -> EXTERN: (57,35) printf(const char *__restrict__, ...)
  -> EXTERN: (58,5) free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at sieve.c(20,5)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at sieve.c(20,5)
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ .2 } private={ } firstprivate={ number primes i } lastprivate={ } firstlastprivate={ } reduction={ }
   remark #15388: vectorization support: reference primes[i] has aligned access   [ sieve.c(22,9) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 3.760 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=64
LOOP END

LOOP BEGIN at sieve.c(20,5)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference primes[i] has aligned access   [ sieve.c(22,9) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 3.760 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=256
LOOP END

LOOP BEGIN at sieve.c(20,5)
<Remainder loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1024
LOOP END

LOOP BEGIN at sieve.c(30,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between primes[i] (34:13) and primes[j*current] (39:17)
   remark #17106: parallel dependence: assumed FLOW dependence between primes[j*current] (39:17) and primes[i] (34:13)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at sieve.c(37,13)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between primes[j*current] (39:17) and primes[j*current] (39:17)
      remark #17106: parallel dependence: assumed OUTPUT dependence between primes[j*current] (39:17) and primes[j*current] (39:17)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <primes[j*current]>, stride is unknown to compiler   [ sieve.c(39,17) ]
      remark #15305: vectorization support: vector length 4
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 8.750 
      remark #15478: estimated potential speedup: 0.340 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at sieve.c(49,5)
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ .2 } private={ } firstprivate={ number primes i } lastprivate={ } firstlastprivate={ } reduction={ counter }
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.654
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 19 
   remark #15477: vector cost: 3.250 
   remark #15478: estimated potential speedup: 5.670 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=32
LOOP END

LOOP BEGIN at sieve.c(49,5)
<Remainder loop for vectorization>
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.933
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 19 
   remark #15477: vector cost: 3.250 
   remark #15478: estimated potential speedup: 5.670 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=128
LOOP END

LOOP BEGIN at sieve.c(49,5)
<Remainder loop for vectorization>
   remark #25015: Estimate of max trip count of loop=512
LOOP END

LOOP BEGIN at sieve.c(20,5)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at sieve.c(20,5)
   remark #15388: vectorization support: reference primes[i] has aligned access   [ sieve.c(22,9) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 3.760 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=64
LOOP END

LOOP BEGIN at sieve.c(20,5)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference primes[i] has aligned access   [ sieve.c(22,9) ]
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 3.760 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1024
LOOP END

LOOP BEGIN at sieve.c(49,5)
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.654
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 19 
   remark #15477: vector cost: 3.250 
   remark #15478: estimated potential speedup: 5.670 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=32
LOOP END

LOOP BEGIN at sieve.c(49,5)
<Remainder loop for vectorization>
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.933
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 19 
   remark #15477: vector cost: 3.250 
   remark #15478: estimated potential speedup: 5.670 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=128
LOOP END

LOOP BEGIN at sieve.c(49,5)
<Remainder loop for vectorization>
   remark #25015: Estimate of max trip count of loop=512
LOOP END

    Report from: Code generation optimizations [cg]

sieve.c(7,1):remark #34051: REGISTER ALLOCATION : [main] sieve.c:7

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :     409
            Global    :     111
            Local     :     298
        Regenerable   :     118
        Spilled       :       1
        
    Routine stack
        Variables     :     116 bytes*
            Reads     :      14 [2.77e+03 ~ 3.3%]
            Writes    :      19 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :      18 [5.00e+00 ~ 0.0%]
            Writes    :      16 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
