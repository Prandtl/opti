Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.3.199 Build 20190206

Compiler options: -o 2.o -std=c99 -parallel -qopt-report=5

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main()) [1/1=100.0%] 2_1.c(8,1)
  -> EXTERN: (12,17) malloc(size_t)
  -> EXTERN: (13,17) malloc(size_t)
  -> EXTERN: (19,12) calculate(float *, float *)
  -> EXTERN: (20,5) printf(const char *__restrict__, ...)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at 2_1.c(14,5)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at 2_1.c(14,5)
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ } private={ } firstprivate={ a b i } lastprivate={ } firstlastprivate={ } reduction={ }
   remark #15388: vectorization support: reference a[i] has aligned access   [ 2_1.c(16,2) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ 2_1.c(17,9) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.438
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 11 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 5.450 
   remark #15487: type converts: 2 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=625
LOOP END

LOOP BEGIN at 2_1.c(14,5)
<Alternate Alignment Vectorized Loop>
   remark #25015: Estimate of max trip count of loop=625
LOOP END

LOOP BEGIN at 2_1.c(14,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference a[i] has unaligned access   [ 2_1.c(16,2) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ 2_1.c(17,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.929
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 11 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 5.450 
   remark #15487: type converts: 2 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2500
LOOP END

LOOP BEGIN at 2_1.c(14,5)
<Remainder loop for vectorization>
   remark #25015: Estimate of max trip count of loop=10000
LOOP END

LOOP BEGIN at 2_1.c(14,5)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at 2_1.c(14,5)
   remark #15388: vectorization support: reference a[i] has aligned access   [ 2_1.c(16,2) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ 2_1.c(17,9) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.438
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 11 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 5.450 
   remark #15487: type converts: 2 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=625
LOOP END

LOOP BEGIN at 2_1.c(14,5)
<Alternate Alignment Vectorized Loop>
   remark #25015: Estimate of max trip count of loop=625
LOOP END

LOOP BEGIN at 2_1.c(14,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference a[i] has unaligned access   [ 2_1.c(16,2) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ 2_1.c(17,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.929
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 11 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 5.450 
   remark #15487: type converts: 2 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=10000
LOOP END

    Report from: Code generation optimizations [cg]

2_1.c(8,1):remark #34051: REGISTER ALLOCATION : [main] 2_1.c:8

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   26[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm11]
        
    Routine temporaries
        Total         :     284
            Global    :      60
            Local     :     224
        Regenerable   :      47
        Spilled       :       0
        
    Routine stack
        Variables     :      40 bytes*
            Reads     :       4 [2.00e+04 ~ 0.8%]
            Writes    :       9 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :      10 [5.00e+00 ~ 0.0%]
            Writes    :      10 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
