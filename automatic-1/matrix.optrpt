Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.3.199 Build 20190206

Compiler options: -parallel -no-vec -o matrix.o -O2 -qopt-report=5

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: true
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main()) [1/4=25.0%] matrix.c(67,1)
  -> EXTERN: (68,18) malloc(size_t)
  -> EXTERN: (68,48) printf(const char *__restrict__, ...)
  -> EXTERN: (69,18) malloc(size_t)
  -> EXTERN: (69,48) printf(const char *__restrict__, ...)
  -> EXTERN: (70,18) malloc(size_t)
  -> EXTERN: (70,48) printf(const char *__restrict__, ...)
  -> EXTERN: (74,10) clock(void)
  -> INLINE: (75,5) generate_matrices() (isz = 86) (sz = 89)
    -> EXTERN: (13,5) srand(unsigned int)
    -> EXTERN: (13,21) time(long long *)
    -> EXTERN: (19,35) rand(void)
    -> EXTERN: (26,35) rand(void)
  -> EXTERN: (77,5) printf(const char *__restrict__, ...)
  -> EXTERN: (77,47) clock(void)
  -> INLINE: (78,5) multiply_matrices(float *, float *, float *, int, int, int) (isz = 70) (sz = 85)
    -> EXTERN: (49,34) malloc(size_t)
    -> EXTERN: (60,9) memcpy(void *, const void *, unsigned long long)
    -> EXTERN: (61,9) free(void *)
  -> EXTERN: (79,10) clock(void)
  -> EXTERN: (79,19) printf(const char *__restrict__, ...)
  -> EXTERN: (83,9) printf(const char *__restrict__, ...)
  -> EXTERN: (86,9) printf(const char *__restrict__, ...)
  -> EXTERN: (91,5) printf(const char *__restrict__, ...)
  -> EXTERN: (92,5) printf(const char *__restrict__, ...)
  -> EXTERN: (94,5) free(void *)
  -> EXTERN: (95,5) free(void *)
  -> EXTERN: (96,5) free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at matrix.c(15,5) inlined into matrix.c(75,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between call:rand(void) (19:35) and call:rand(void) (19:35)
   remark #17106: parallel dependence: assumed OUTPUT dependence between call:rand(void) (19:35) and call:rand(void) (19:35)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at matrix.c(17,9) inlined into matrix.c(75,5)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between call:rand(void) (19:35) and call:rand(void) (19:35)
      remark #17106: parallel dependence: assumed OUTPUT dependence between call:rand(void) (19:35) and call:rand(void) (19:35)
      remark #15540: loop was not vectorized: auto-vectorization is disabled with -no-vec flag
   LOOP END
LOOP END

LOOP BEGIN at matrix.c(22,5) inlined into matrix.c(75,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between call:rand(void) (26:35) and call:rand(void) (26:35)
   remark #17106: parallel dependence: assumed OUTPUT dependence between call:rand(void) (26:35) and call:rand(void) (26:35)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at matrix.c(24,9) inlined into matrix.c(75,5)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between call:rand(void) (26:35) and call:rand(void) (26:35)
      remark #17106: parallel dependence: assumed OUTPUT dependence between call:rand(void) (26:35) and call:rand(void) (26:35)
      remark #15540: loop was not vectorized: auto-vectorization is disabled with -no-vec flag
   LOOP END
LOOP END

LOOP BEGIN at matrix.c(47,5) inlined into matrix.c(78,5)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 3 ) --> ( 1 3 2 ) 
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ } private={ } firstprivate={ k j buffer sum B A C i } lastprivate={ } firstlastprivate={ } reduction={ }
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
   remark #25015: Estimate of max trip count of loop=2000

   LOOP BEGIN at matrix.c(51,9) inlined into matrix.c(78,5)
      remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
      remark #25015: Estimate of max trip count of loop=2000

      LOOP BEGIN at matrix.c(54,13) inlined into matrix.c(78,5)
         remark #15540: loop was not vectorized: auto-vectorization is disabled with -no-vec flag
         remark #25438: unrolled without remainder by 2  
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
         remark #25457: Number of partial sums replaced: 1
         remark #25015: Estimate of max trip count of loop=2000
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at matrix.c(47,5) inlined into matrix.c(78,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
   remark #25015: Estimate of max trip count of loop=2000

   LOOP BEGIN at matrix.c(51,9) inlined into matrix.c(78,5)
      remark #17107: loop was not parallelized: inner loop
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
      remark #25015: Estimate of max trip count of loop=2000

      LOOP BEGIN at matrix.c(54,13) inlined into matrix.c(78,5)
         remark #17107: loop was not parallelized: inner loop
         remark #15540: loop was not vectorized: auto-vectorization is disabled with -no-vec flag
         remark #25438: unrolled without remainder by 2  
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
         remark #25457: Number of partial sums replaced: 1
         remark #25015: Estimate of max trip count of loop=2000
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

matrix.c(60,9):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
matrix.c(60,9):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
matrix.c(60,9):remark #34026: call to memcpy implemented as a call to optimized library version
matrix.c(60,9):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
matrix.c(60,9):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
matrix.c(60,9):remark #34026: call to memcpy implemented as a call to optimized library version
matrix.c(67,1):remark #34051: REGISTER ALLOCATION : [main] matrix.c:67

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     230
            Global    :      78
            Local     :     152
        Regenerable   :      84
        Spilled       :       8
        
    Routine stack
        Variables     :      84 bytes*
            Reads     :       4 [1.00e+01 ~ 0.0%]
            Writes    :      15 [0.00e+00 ~ 0.0%]
        Spills        :     104 bytes*
            Reads     :      21 [2.16e+01 ~ 0.0%]
            Writes    :      20 [8.30e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: generate_matrices()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (generate_matrices()) [2/4=50.0%] matrix.c(10,26)
  -> EXTERN: (13,5) srand(unsigned int)
  -> EXTERN: (13,21) time(long long *)
  -> EXTERN: (19,35) rand(void)
  -> EXTERN: (26,35) rand(void)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at matrix.c(15,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between call:rand(void) (19:35) and call:rand(void) (19:35)
   remark #17106: parallel dependence: assumed OUTPUT dependence between call:rand(void) (19:35) and call:rand(void) (19:35)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at matrix.c(17,9)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between call:rand(void) (19:35) and call:rand(void) (19:35)
      remark #17106: parallel dependence: assumed OUTPUT dependence between call:rand(void) (19:35) and call:rand(void) (19:35)
      remark #15540: loop was not vectorized: auto-vectorization is disabled with -no-vec flag
   LOOP END
LOOP END

LOOP BEGIN at matrix.c(22,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between call:rand(void) (26:35) and call:rand(void) (26:35)
   remark #17106: parallel dependence: assumed OUTPUT dependence between call:rand(void) (26:35) and call:rand(void) (26:35)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at matrix.c(24,9)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between call:rand(void) (26:35) and call:rand(void) (26:35)
      remark #17106: parallel dependence: assumed OUTPUT dependence between call:rand(void) (26:35) and call:rand(void) (26:35)
      remark #15540: loop was not vectorized: auto-vectorization is disabled with -no-vec flag
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

matrix.c(10,26):remark #34051: REGISTER ALLOCATION : [generate_matrices] matrix.c:10

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rbp rdi r13-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :      43
            Global    :      27
            Local     :      16
        Regenerable   :       7
        Spilled       :       5
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: print_matrice(float *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (print_matrice(float *, int, int)) [3/4=75.0%] matrix.c(31,45)
  -> EXTERN: (37,13) printf(const char *__restrict__, ...)
  -> EXTERN: (39,9) printf(const char *__restrict__, ...)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at matrix.c(33,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between call:printf(const char *__restrict__, ...) (37:13) and call:printf(const char *__restrict__, ...) (39:9)
   remark #17106: parallel dependence: assumed OUTPUT dependence between call:printf(const char *__restrict__, ...) (39:9) and call:printf(const char *__restrict__, ...) (37:13)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at matrix.c(35,9)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ matrix.c(37,13) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

matrix.c(31,45):remark #34051: REGISTER ALLOCATION : [print_matrice] matrix.c:31

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8 r12-r15 zmm0]
        
    Routine temporaries
        Total         :      25
            Global    :      16
            Local     :       9
        Regenerable   :       5
        Spilled       :       8
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      64 bytes*
            Reads     :       8 [1.44e+01 ~ 4.1%]
            Writes    :       8 [1.44e+01 ~ 4.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: multiply_matrices(float *, float *, float *, int, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (multiply_matrices(float *, float *, float *, int, int, int)) [4/4=100.0%] matrix.c(43,78)
  -> EXTERN: (49,34) malloc(size_t)
  -> EXTERN: (60,9) memcpy(void *, const void *, unsigned long long)
  -> EXTERN: (61,9) free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at matrix.c(47,5)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 3 ) --> ( 1 3 2 ) 
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ } private={ } firstprivate={ k j buffer sum B A C i } lastprivate={ } firstlastprivate={ } reduction={ }
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
   remark #25015: Estimate of max trip count of loop=2000

   LOOP BEGIN at matrix.c(51,9)
      remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
      remark #25015: Estimate of max trip count of loop=2000

      LOOP BEGIN at matrix.c(54,13)
         remark #15540: loop was not vectorized: auto-vectorization is disabled with -no-vec flag
         remark #25438: unrolled without remainder by 2  
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
         remark #25457: Number of partial sums replaced: 1
         remark #25015: Estimate of max trip count of loop=2000
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at matrix.c(47,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
   remark #25015: Estimate of max trip count of loop=2000

   LOOP BEGIN at matrix.c(51,9)
      remark #17107: loop was not parallelized: inner loop
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
      remark #25015: Estimate of max trip count of loop=2000

      LOOP BEGIN at matrix.c(54,13)
         remark #17107: loop was not parallelized: inner loop
         remark #15540: loop was not vectorized: auto-vectorization is disabled with -no-vec flag
         remark #25438: unrolled without remainder by 2  
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
         remark #25457: Number of partial sums replaced: 1
         remark #25015: Estimate of max trip count of loop=2000
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

matrix.c(60,9):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
matrix.c(60,9):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
matrix.c(60,9):remark #34026: call to memcpy implemented as a call to optimized library version
matrix.c(60,9):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
matrix.c(60,9):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
matrix.c(60,9):remark #34026: call to memcpy implemented as a call to optimized library version
matrix.c(43,78):remark #34051: REGISTER ALLOCATION : [multiply_matrices] matrix.c:43

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     147
            Global    :      48
            Local     :      99
        Regenerable   :      47
        Spilled       :       3
        
    Routine stack
        Variables     :      72 bytes*
            Reads     :       2 [1.00e+01 ~ 0.4%]
            Writes    :      13 [0.00e+00 ~ 0.0%]
        Spills        :      72 bytes*
            Reads     :      15 [1.09e+01 ~ 0.5%]
            Writes    :      15 [2.70e+00 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
